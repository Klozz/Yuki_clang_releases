name: Create GitHub Release with S3 Toolchain Info

on:
  workflow_dispatch:
    inputs:
      s3_toolchain_url:
        description: 'Direct S3 URL to the toolchain archive (.tar.gz or .zip)'
        required: true
        default: 'YOUR_DEFAULT_S3_TOOLCHAIN_URL'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Get timestamp
        id: datetime
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"

      - name: Download and Extract Toolchain, Get Clang/Binutils Info
        id: get_toolchain_info
        run: |
          set -euo pipefail

          S3_TOOLCHAIN_URL="${{ github.event.inputs.s3_toolchain_url }}"
          DOWNLOAD_DIR="downloaded_toolchain"
          EXTRACTED_PATH="$DOWNLOAD_DIR/extracted_clang"

          mkdir -p "$DOWNLOAD_DIR"
          FILENAME=$(basename "$S3_TOOLCHAIN_URL")
          DOWNLOAD_PATH="$DOWNLOAD_DIR/$FILENAME"

          echo "Downloading toolchain from: $S3_TOOLCHAIN_URL"
          curl -L -o "$DOWNLOAD_PATH" "$S3_TOOLCHAIN_URL"
          echo "Downloaded to: $DOWNLOAD_PATH"

          mkdir -p "$EXTRACTED_PATH"
          if [[ "$FILENAME" == *.tar.gz ]]; then
            tar -xzf "$DOWNLOAD_PATH" -C "$EXTRACTED_PATH"
          elif [[ "$FILENAME" == *.zip ]]; then
            unzip "$DOWNLOAD_PATH" -d "$EXTRACTED_PATH"
          else
            echo "Unsupported archive format"
            exit 1
          fi

          CLANG_BINARY_PATH="$EXTRACTED_PATH/bin/clang"
          if [ ! -f "$CLANG_BINARY_PATH" ]; then
            echo "Clang binary not found"
            exit 1
          fi
          chmod +x "$CLANG_BINARY_PATH"

          CLANG_VERSION_OUTPUT=$("$CLANG_BINARY_PATH" --version)
          CLANG_VERSION_RAW=$(echo "$CLANG_VERSION_OUTPUT" | grep -oP 'clang version \K[^\s]+')
          CLANG_VERSION="${CLANG_VERSION_RAW:-N/A}"

          CLANG_VERSION_TAG_SAFE=$(echo "$CLANG_VERSION_RAW" | sed 's/[^a-zA-Z0-9._-]/_/g; s/+/-/g; s/^[-_]*//; s/[-_]*$//')
          if [[ -z "$CLANG_VERSION_TAG_SAFE" ]]; then
            CLANG_VERSION_TAG_SAFE="unknown"
          fi

          LLVM_COMMIT_HASH=$(echo "$CLANG_VERSION_OUTPUT" | grep -oP '\(https:\/\/github\.com\/llvm\/llvm-project\s+\K[a-f0-9]{40}' || echo "N/A")
          CLANG_BINARY_SHA256=$(sha256sum "$CLANG_BINARY_PATH" | awk '{print $1}')

          LD_BINARY_PATH="$EXTRACTED_PATH/bin/ld"
          BINUTILS_VERSION="N/A"
          if [ -x "$LD_BINARY_PATH" ]; then
            BINUTILS_VERSION_OUTPUT=$("$LD_BINARY_PATH" --version 2>&1 || true)
            BINUTILS_VERSION=$(echo "$BINUTILS_VERSION_OUTPUT" | grep -oP 'GNU ld \(GNU Binutils\) \K\d+(\.\d+)+')
          fi

          echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_OUTPUT"
          echo "CLANG_VERSION_TAG_SAFE=$CLANG_VERSION_TAG_SAFE" >> "$GITHUB_OUTPUT"
          echo "LLVM_COMMIT_HASH=$LLVM_COMMIT_HASH" >> "$GITHUB_OUTPUT"
          echo "CLANG_BINARY_SHA256=$CLANG_BINARY_SHA256" >> "$GITHUB_OUTPUT"
          echo "BINUTILS_VERSION=$BINUTILS_VERSION" >> "$GITHUB_OUTPUT"
          echo "ARCHIVE_FILENAME=$FILENAME" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release (if not exists)
        id: create_release
        uses: actions/create-release@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.ABISMO_DE_LOS_SECRETOS }}
        with:
          tag_name: "v${{ steps.get_toolchain_info.outputs.CLANG_VERSION_TAG_SAFE }}-${{ steps.datetime.outputs.timestamp }}"
          release_name: "Yuki Clang Toolchain Release - Clang ${{ steps.get_toolchain_info.outputs.CLANG_VERSION }}"
          body: |
            ## Toolchain Info

            - LLVM version: ${{ steps.get_toolchain_info.outputs.CLANG_VERSION }}
            - Binutils version: ${{ steps.get_toolchain_info.outputs.BINUTILS_VERSION }}
            - LLVM commit: `${{ steps.get_toolchain_info.outputs.LLVM_COMMIT_HASH }}`
            - SHA256 of clang binary: `${{ steps.get_toolchain_info.outputs.CLANG_BINARY_SHA256 }}`

            ---
            _This release was created via GitHub Actions, downloading the toolchain from S3._
          draft: false
          prerelease: false

      - name: Check if asset already exists
        id: check_asset
        run: |
          set -euo pipefail
          TAG_NAME="v${{ steps.get_toolchain_info.outputs.CLANG_VERSION_TAG_SAFE }}-${{ steps.datetime.outputs.timestamp }}"
          FILENAME="${{ steps.get_toolchain_info.outputs.ARCHIVE_FILENAME }}"

          RELEASE_API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.ABISMO_DE_LOS_SECRETOS }}" "$RELEASE_API_URL")

          if echo "$RESPONSE" | jq -e ".assets[]?.name == \"$FILENAME\"" >/dev/null; then
            echo "Asset already exists: $FILENAME"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Asset does not exist yet"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload release asset (if not already uploaded)
        if: steps.check_asset.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          files: downloaded_toolchain/${{ steps.get_toolchain_info.outputs.ARCHIVE_FILENAME }}
          tag_name: "v${{ steps.get_toolchain_info.outputs.CLANG_VERSION_TAG_SAFE }}-${{ steps.datetime.outputs.timestamp }}"
        env:
          GITHUB_TOKEN: ${{ secrets.ABISMO_DE_LOS_SECRETOS }}
